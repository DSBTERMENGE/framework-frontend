/**
 * ================================================================
 * CLASSE VALIDARDADOSFORM - FRAMEWORK DSB
 * ================================================================
 * 
 * RESPONSABILIDADES:
 * - Valida√ß√µes comuns para todos os formul√°rios
 * - Controle de altera√ß√µes n√£o salvas
 * - Valida√ß√µes de campos obrigat√≥rios
 * - Valida√ß√µes de tipos e formatos
 * - Controle de navega√ß√£o com dados alterados
 * 
 * FILOSOFIA:
 * - M√°ximo reuso de c√≥digo
 * - M√≠nimo c√≥digo espec√≠fico no desenvolvedor
 * - Configura√ß√£o atrav√©s de propriedades (padr√£o framework)
 * - Heran√ßa pela classe FormComum
 * 
 * PADR√ÉO DE PROPRIEDADES:
 * - Arrays com separadores v√≠rgula (igual outros construtores)
 * - Configura√ß√µes flex√≠veis e opcionais
 * - Mensagens de erro customiz√°veis
 */

export default class ValidarDadosForm {
    
    /**
     * Construtor da classe ValidarDadosForm
     * Segue o padr√£o dos construtores do framework DSB
     * @param {Array<string>} camposObrigatorios - Array com nomes dos campos obrigat√≥rios para salvamento ['nome', 'email', 'telefone']
     * @param {Object} opcoes - Op√ß√µes avan√ßadas (mensagens customizadas, configura√ß√µes especiais)
     */
    constructor(camposObrigatorios = [], opcoes = {}) {
        
        // ============= VALIDA√á√ÉO DOS PAR√ÇMETROS =============
        ValidarDadosForm.validacao(camposObrigatorios);
        
        // ============= PROPRIEDADES DE CONFIGURA√á√ÉO =============
        
        // Campos obrigat√≥rios para salvamento (configurado pelo desenvolvedor)
        this.camposObrigatorios = camposObrigatorios; // ['nome', 'email', 'telefone']
        
        // Vari√°vel global para armazenar mensagem de erro atual
        this.mensagemDeErro = '';
        
        // Regex para valida√ß√µes de formato
        this.regex_validacao = {
            email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
            telefone: /^\(\d{2}\)\s\d{4,5}-\d{4}$/,
            cpf: /^\d{3}\.\d{3}\.\d{3}-\d{2}$/,
            cep: /^\d{5}-\d{3}$/,
            numero: /^\d+$/,
            decimal: /^\d+([,\.]\d{1,2})?$/,
            ...opcoes.regex_customizados // Merge com regex customizados
        };
        
        // Controle de estado interno
        this.dados_originais = {}; // Dados quando carregou/salvou
        this.dados_alterados = false; // Flag de altera√ß√µes
        this.validacao_ativa = opcoes.validacao_ativa !== undefined ? opcoes.validacao_ativa : true; // Permite desabilitar valida√ß√µes
        
        // ============= INICIALIZA√á√ÉO =============
        this.inicializarValidador();
    }
    
    // ============= VALIDA√á√ÉO EST√ÅTICA DOS PAR√ÇMETROS =============
    
    /**
     * Valida√ß√£o dos par√¢metros do construtor (m√©todo est√°tico seguindo padr√£o framework)
     * @param {Array} camposObrigatorios - Array de campos obrigat√≥rios
     */
    static validacao(camposObrigatorios) {
        // Verifica se √© um array
        if (!Array.isArray(camposObrigatorios)) {
            throw new Error('camposObrigatorios deve ser um array');
        }
        
        // Verifica se todos os elementos s√£o strings
        for (let campo of camposObrigatorios) {
            if (typeof campo !== 'string' || campo.trim() === '') {
                throw new Error('Todos os campos obrigat√≥rios devem ser strings n√£o vazias');
            }
        }
        
        console.log('‚úÖ ValidarDadosForm: Par√¢metros validados com sucesso');
    }
    
    // ============= M√âTODOS DE INICIALIZA√á√ÉO =============
    
    /**
     * Inicializa o validador e configura listeners b√°sicos
     */
    inicializarValidador() {
        console.log('üîß ValidarDadosForm: Inicializando validador...');
        
        // Configura detec√ß√£o de altera√ß√µes nos campos (ser√° chamado ap√≥s render)
        setTimeout(() => this.configurarDeteccaoAlteracoes(), 100);
    }
    
    /**
     * Configura detec√ß√£o autom√°tica de altera√ß√µes nos campos
     */
    configurarDeteccaoAlteracoes() {
        // Busca todos os inputs, selects e textareas do formul√°rio
        const campos = document.querySelectorAll('#divFormCrud input, #divFormCrud select, #divFormCrud textarea');
        
        campos.forEach(campo => {
            campo.addEventListener('input', () => this.marcarComoAlterado());
            campo.addEventListener('change', () => this.marcarComoAlterado());
        });
        
        console.log(`‚úÖ ValidarDadosForm: ${campos.length} campos monitorados para altera√ß√µes`);
    }
    
    // ============= M√âTODOS PRINCIPAIS DE VALIDA√á√ÉO =============
    
    // ********* VALIDA√á√ÉO PARA SALVAR DADOS *********
    
    /**
     * M√©todo principal p√∫blico: Coordena todas as valida√ß√µes para salvamento
     * Executa valida√ß√µes em sequ√™ncia, parando na primeira que falhar
     * @returns {boolean} true se v√°lido, false se inv√°lido
     */
    Validar() {
        console.log('üîç ValidarDadosForm: Iniciando valida√ß√£o para salvamento...');
        
        if (!this.validacao_ativa) {
            console.log('‚ö†Ô∏è ValidarDadosForm: Valida√ß√£o desabilitada');
            return true;
        }
        
        // Valida√ß√£o 1: Campos obrigat√≥rios
        const resultadoCampos = this._validarCamposObrigatorios();
        if (resultadoCampos.sucesso === false) {
            this.mensagemDeErro = resultadoCampos.mensagem;
            this._emitirMsgDeErro();
            return false;
        }
        
        // TODO: Valida√ß√£o 2: Tipos de dados (quando implementarmos)
        // const resultadoTipos = this._validarTipos();
        // if (resultadoTipos.sucesso === false) {
        //     this.mensagemDeErro = resultadoTipos.mensagem;
        //     this._emitirMsgDeErro();
        //     return false;
        // }
        
        // TODO: Valida√ß√£o 3: Tamanhos (quando implementarmos)
        // const resultadoTamanhos = this._validarTamanhos();
        // if (resultadoTamanhos.sucesso === false) {
        //     this.mensagemDeErro = resultadoTamanhos.mensagem;
        //     this._emitirMsgDeErro();
        //     return false;
        // }
        
        // TODO: Valida√ß√£o 4: Duplicatas (quando implementarmos)
        // const resultadoDuplicatas = this._validarDuplicatas();
        // if (resultadoDuplicatas.sucesso === false) {
        //     this.mensagemDeErro = resultadoDuplicatas.mensagem;
        //     this._emitirMsgDeErro();
        //     return false;
        // }
        
        // Se chegou at√© aqui, todas as valida√ß√µes passaram
        console.log('‚úÖ ValidarDadosForm: Todas as valida√ß√µes para salvamento aprovadas');
        return true;
    }

    // ******************* VALIDA√á√ÉO PARA NAVEGAR *******************

    /**
     * M√©todo principal p√∫blico: Valida antes de navegar (trocar registro, formul√°rio, etc.)
     * Verifica se h√° altera√ß√µes n√£o salvas antes de permitir navega√ß√£o
     * @returns {boolean} true se pode navegar, false se deve permanecer
     */
    validarNavegar() {
        console.log('üîç ValidarDadosForm: Iniciando valida√ß√£o para navega√ß√£o...');
        
        if (!this.validacao_ativa) {
            console.log('‚ö†Ô∏è ValidarDadosForm: Valida√ß√£o desabilitada');
            return true;
        }
        
        // Valida√ß√£o 1: Verificar altera√ß√µes n√£o salvas
        const resultadoAlteracoes = this._verificarAlteracoesNaoSalvas();
        if (resultadoAlteracoes.sucesso === false) {
            this.mensagemDeErro = resultadoAlteracoes.mensagem;
            this._emitirMsgDeErro();
            return false;
        }
        
        // TODO: Valida√ß√£o 2: Outras valida√ß√µes para navega√ß√£o (quando implementarmos)
        // const resultadoOutras = this._validarOutrasNavegacao();
        // if (resultadoOutras.sucesso === false) {
        //     this.mensagemDeErro = resultadoOutras.mensagem;
        //     this._emitirMsgDeErro();
        //     return false;
        // }
        
        // Se chegou at√© aqui, pode navegar
        console.log('‚úÖ ValidarDadosForm: Valida√ß√£o para navega√ß√£o aprovada');
        return true;
    }
    
    // ********* M√âTODOS PARA VALIDA√á√ÉO DE SALVAMENTO *********
    
    /**
     * M√©todo privado: Valida campos obrigat√≥rios
     * @returns {Object} {sucesso: boolean, mensagem: string}
     */
    _validarCamposObrigatorios() {
        const camposVazios = [];
        
        // Loop pelos campos obrigat√≥rios configurados
        for (let nomeCampo of this.camposObrigatorios) {
            // Verifica se o campo existe no DOM
            const campo = document.querySelector(`[name="${nomeCampo}"]`);
            
            if (!campo) {
                console.warn(`‚ö†Ô∏è ValidarDadosForm: Campo obrigat√≥rio '${nomeCampo}' n√£o encontrado no formul√°rio`);
                continue;
            }
            
            // Verifica se o campo tem dados
            if (!campo.value || campo.value.trim() === '') {
                camposVazios.push(nomeCampo);
            }
        }
        
        // Se n√£o h√° campos vazios, retorna sucesso
        if (camposVazios.length === 0) {
            return { sucesso: true, mensagem: '' };
        }
        
        // Montagem da mensagem de erro
        let mensagem = '';
        let listaCampos = '';
        
        // Loop para montar a lista de campos vazios
        for (let i = 0; i < camposVazios.length; i++) {
            const labelCampo = this._obterLabelDoCampo(camposVazios[i]);
            listaCampos += labelCampo;
            
            // Adiciona v√≠rgula se n√£o for o √∫ltimo campo
            if (i < camposVazios.length - 1) {
                listaCampos += ', ';
            }
        }
        
        // Monta mensagem considerando singular/plural
        if (camposVazios.length === 1) {
            mensagem = `O campo ${listaCampos} √© necess√°rio.`;
        } else {
            mensagem = `Os campos ${listaCampos} s√£o necess√°rios.`;
        }
        
        console.log('‚ùå ValidarDadosForm: Campos obrigat√≥rios vazios:', camposVazios);
        return { sucesso: false, mensagem: mensagem };
    }
    
    // ********* M√âTODOS PARA VALIDA√á√ÉO DE NAVEGA√á√ÉO *********
    
    /**
     * M√©todo privado: Verifica se h√° altera√ß√µes n√£o salvas
     * @returns {Object} {sucesso: boolean, mensagem: string}
     */
    _verificarAlteracoesNaoSalvas() {
        // TODO: Implementar l√≥gica para detectar altera√ß√µes
        // Por enquanto, retorna sempre sucesso (sem altera√ß√µes)
        
        // Verifica se h√° dados alterados (flag simples por enquanto)
        if (this.dados_alterados) {
            const mensagem = "H√° altera√ß√µes n√£o salvas. Salve antes de navegar ou as altera√ß√µes ser√£o perdidas.";
            console.log('‚ùå ValidarDadosForm: Altera√ß√µes n√£o salvas detectadas');
            return { sucesso: false, mensagem: mensagem };
        }
        
        // TODO: Implementar compara√ß√£o mais sofisticada
        // Comparar dados atuais com this.dados_originais
        // const dadosAtuais = this._obterDadosAtuais();
        // const alteracoes = this._compararDados(this.dados_originais, dadosAtuais);
        // if (alteracoes.length > 0) {
        //     const mensagem = `Campos alterados: ${alteracoes.join(', ')}. Salve antes de navegar.`;
        //     return { sucesso: false, mensagem: mensagem };
        // }
        
        return { sucesso: true, mensagem: '' };
    }
    
    // TODO: M√©todos privados futuros para navega√ß√£o
    // _validarOutrasNavegacao() { 
    //     // Placeholder para outras valida√ß√µes de navega√ß√£o futuras
    //     return { sucesso: true, mensagem: '' };
    // }
    
    // TODO: M√©todos privados futuros para salvamento
    // _validarTipos() { 
    //     // Placeholder para valida√ß√µes de tipo futuras
    //     return { sucesso: true, mensagem: '' };
    // }
    
    // _validarTamanhos() { 
    //     // Placeholder para valida√ß√µes de tamanho futuras
    //     return { sucesso: true, mensagem: '' };
    // }
    
    // ============= CONTROLE DE ALTERA√á√ïES =============
    
    /**
     * Marca formul√°rio como alterado
     */
    marcarComoAlterado() {
        this.dados_alterados = true;
        console.log('üìù ValidarDadosForm: Formul√°rio marcado como alterado');
    }
    
    /**
     * Verifica se h√° altera√ß√µes n√£o salvas
     * @returns {boolean} true se h√° altera√ß√µes
     */
    verificar_alteracoes_nao_salvas() {
        return this.dados_alterados;
    }
    
    /**
     * Salva estado atual dos dados (ap√≥s salvamento ou carregamento)
     */
    salvar_estado_dados() {
        this.dados_alterados = false;
        
        // Captura valores atuais
        const campos = document.querySelectorAll('#divFormCrud input, #divFormCrud select, #divFormCrud textarea');
        this.dados_originais = {};
        
        campos.forEach(campo => {
            if (campo.name) {
                this.dados_originais[campo.name] = campo.value;
            }
        });
        
        console.log('üíæ ValidarDadosForm: Estado dos dados salvo');
    }
    
    /**
     * Restaura dados originais (descarta altera√ß√µes)
     */
    descartar_alteracoes() {
        Object.keys(this.dados_originais).forEach(nomeCampo => {
            const campo = document.querySelector(`[name="${nomeCampo}"]`);
            if (campo) {
                campo.value = this.dados_originais[nomeCampo];
            }
        });
        
        this.dados_alterados = false;
        console.log('‚Ü∂ ValidarDadosForm: Altera√ß√µes descartadas');
    }
    
    // ============= M√âTODOS DE NAVEGA√á√ÉO =============
    
    /**
     * Valida antes de navegar (trocar registro, formul√°rio, etc.)
     * @returns {boolean} true se pode navegar, false se deve permanecer
     */
    validar_antes_navegacao() {
        if (!this.verificar_alteracoes_nao_salvas()) {
            return true; // Sem altera√ß√µes, pode navegar
        }
        
        const resposta = confirm(this.mensagens_erro.alteracoes_nao_salvas);
        
        if (resposta) {
            // Usu√°rio quer salvar antes
            return this.validar_para_salvamento();
        } else {
            // Usu√°rio quer descartar altera√ß√µes
            const confirmaDescarte = confirm(this.mensagens_erro.confirmar_descarte);
            if (confirmaDescarte) {
                this.descartar_alteracoes();
                return true;
            }
            return false; // Usu√°rio cancelou
        }
    }
    
    /**
     * Valida antes de encerrar aplica√ß√£o
     * @returns {boolean} true se pode encerrar, false se deve permanecer
     */
    validar_antes_encerramento() {
        return this.validar_antes_navegacao(); // Mesma l√≥gica
    }
    
    /**
     * Fun√ß√£o privada para emitir mensagem de erro
     * Usa a vari√°vel global mensagemDeErro da classe
     * Exibe a mensagem na divRodape com bot√£o OK para remo√ß√£o
     */
    _emitirMsgDeErro() {
        if (!this.mensagemDeErro || this.mensagemDeErro.trim() === '') {
            console.warn('‚ö†Ô∏è ValidarDadosForm: Tentativa de emitir mensagem vazia');
            return;
        }
        
        // Obt√©m a divRodape
        const divRodape = document.getElementById('divRodape');
        if (!divRodape) {
            console.error('‚ùå ValidarDadosForm: divRodape n√£o encontrada no DOM');
            // Fallback para alert se divRodape n√£o existir
            alert(`‚ùå Erro de Valida√ß√£o:\n\n${this.mensagemDeErro}`);
            return;
        }
        
        // Limpa mensagens anteriores (evita ac√∫mulo de mensagens)
        divRodape.innerHTML = '';
        
        // Cria o HTML da mensagem com √≠cone de alerta e bot√£o OK
        const mensagemHTML = `
            <div style="
                background: #f8d7da; 
                border: 1px solid #f5c6cb; 
                color: #721c24; 
                padding: 10px; 
                border-radius: 4px; 
                display: flex; 
                align-items: center; 
                justify-content: space-between;
                margin: 5px 0;
                font-size: 14px;
            ">
                <div style="display: flex; align-items: center;">
                    <span style="margin-right: 8px; font-size: 16px;">‚ö†Ô∏è</span>
                    <span>${this.mensagemDeErro}</span>
                </div>
                <button onclick="this.parentElement.remove()" style="
                    background: #721c24; 
                    color: white; 
                    border: none; 
                    padding: 5px 10px; 
                    border-radius: 3px; 
                    cursor: pointer;
                    font-size: 12px;
                    font-weight: bold;
                ">OK</button>
            </div>
        `;
        
        // Insere a mensagem na divRodape
        divRodape.innerHTML = mensagemHTML;
        
        console.log('‚úÖ ValidarDadosForm: Mensagem de erro exibida na divRodape:', this.mensagemDeErro);
    }
    
    // ============= M√âTODOS AUXILIARES =============
    
    /**
     * Obt√©m labels dos campos para exibi√ß√£o em mensagens
     * @param {Array} nomesCampos Array com nomes dos campos
     * @returns {Array} Array com labels dos campos
     */
    _obterLabelsDosCampos(nomesCampos) {
        return nomesCampos.map(nome => this._obterLabelDoCampo(nome));
    }
    
    /**
     * Obt√©m label de um campo espec√≠fico
     * @param {string} nomeCampo Nome do campo
     * @returns {string} Label do campo
     */
    _obterLabelDoCampo(nomeCampo) {
        const campo = document.querySelector(`[name="${nomeCampo}"]`);
        if (campo) {
            // Tenta encontrar label associado
            const label = document.querySelector(`label[for="${campo.id}"]`);
            if (label) return label.textContent.trim();
            
            // Tenta pelo placeholder
            if (campo.placeholder) return campo.placeholder;
            
            // Fallback para o nome do campo
            return nomeCampo.charAt(0).toUpperCase() + nomeCampo.slice(1);
        }
        return nomeCampo;
    }
    
    /**
     * Emite erros de valida√ß√£o para o usu√°rio (m√©todo legado - manter para compatibilidade)
     * @param {Array} erros Array com mensagens de erro
     */
    _emitirErros(erros) {
        if (erros && erros.length > 0) {
            this.mensagemDeErro = erros.join('\n‚Ä¢ ');
            this._emitirMsgDeErro();
        }
    }
    
    // ============= M√âTODOS DE CONFIGURA√á√ÉO =============
    
    /**
     * Configura campos obrigat√≥rios
     * @param {Array} campos Array com nomes dos campos obrigat√≥rios
     */
    configurarCamposObrigatorios(campos) {
        this.camposObrigatorios = Array.isArray(campos) ? campos : [];
        console.log('‚öôÔ∏è ValidarDadosForm: Campos obrigat√≥rios configurados:', this.camposObrigatorios);
    }
    
    /**
     * Habilita ou desabilita valida√ß√µes
     * @param {boolean} ativo true para ativar, false para desativar
     */
    configurarValidacaoAtiva(ativo) {
        this.validacao_ativa = ativo;
        console.log(`‚öôÔ∏è ValidarDadosForm: Valida√ß√£o ${ativo ? 'ativada' : 'desativada'}`);
    }
    
    /**
     * Configura mensagens de erro customizadas
     * @param {Object} mensagens Objeto com mensagens customizadas
     */
    configurarMensagensErro(mensagens) {
        this.mensagens_erro = { ...this.mensagens_erro, ...mensagens };
        console.log('‚öôÔ∏è ValidarDadosForm: Mensagens de erro customizadas configuradas');
    }
}
