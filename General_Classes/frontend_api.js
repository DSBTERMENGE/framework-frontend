/**
 * üåê CLASSE PRINCIPAL: API Frontend para comunica√ß√£o com Backend
 * 
 * Classe instanci√°vel para gerenciar comunica√ß√£o HTTP entre frontend e backend.
 * Suporta opera√ß√µes CRUD, consultas de views, e popula√ß√£o autom√°tica de formul√°rios.
 * Projetada para reutiliza√ß√£o em m√∫ltiplas aplica√ß√µes do Framework DSB.
 * 
 * ‚úÖ Comunica√ß√£o HTTP padronizada via fetch()
 * ‚úÖ Opera√ß√µes CRUD autom√°ticas (inserir, atualizar, excluir)
 * ‚úÖ Consultas de views com filtros
 * ‚úÖ Popula√ß√£o autom√°tica de formul√°rios
 * ‚úÖ Configura√ß√£o flex√≠vel por propriedades
 * ‚úÖ Error handling robusto
 * ‚úÖ Logging autom√°tico para debug
 * 
 * @example
 * // PADR√ÉO RECOMENDADO: Inst√¢ncia local com configura√ß√£o por propriedades
 * const api = new api_fe();
 * api.aplicacao = "FinCtl";
 * api.backend_url = "http://localhost:5000";
 * api.database_name = "financas.db";
 * api.database_path = "c:\\path\\to\\database";
 * api.view = "vw_grupos";
 * api.tabela_alvo = "tb_grupos";
 * api.campos = ["Todos"];
 * api.campos_ativos = ["grupo", "descricao"];
 * 
 * // Uso para consultas
 * const dados = await api.obter_view();
 * 
 * // Uso para popula√ß√£o de formul√°rios
 * await api.popularform("grupos", "vw_grupos", {modo: "primeiro"});
 * 
 * @author Framework DSB
 * @version 3.0.0 - Reorganiza√ß√£o com padr√£o DSB e property-based configuration
 */

/**
 * üéØ CLASSE api_fe - API Frontend instanci√°vel para m√∫ltiplas aplica√ß√µes
 * 
 * Permite comunica√ß√£o padronizada entre frontend JavaScript e backend Python.
 * Cada inst√¢ncia pode ser configurada para aplica√ß√µes espec√≠ficas mantendo
 * independ√™ncia de configura√ß√µes e estados.
 * 
 * @property {string} aplicacao - Nome da aplica√ß√£o que utiliza esta inst√¢ncia
 * @property {string} versao - Vers√£o da aplica√ß√£o (opcional)
 * @property {boolean} debug - Flag para ativar logs detalhados de debug
 * @property {string} backend_url - URL completa do servidor backend (ex: "http://localhost:5000")
 * @property {number} timeout - Timeout em ms para requisi√ß√µes HTTP (padr√£o: 10000)
 * @property {Object} headers - Headers HTTP padr√£o para requisi√ß√µes
 * 
 * @property {string} database_name - Nome do arquivo de banco de dados (ex: "financas.db")
 * @property {string} database_path - Caminho completo para o diret√≥rio do banco
 * @property {string} database_host - Host do banco (para bancos remotos)
 * 
 * @property {string} view - Nome da view ativa para consultas (ex: "vw_grupos")
 * @property {string} tabela_alvo - Nome da tabela para opera√ß√µes CRUD (ex: "tb_grupos")
 * @property {Array<string>} campos - Campos retornados em consultas (["Todos"] ou espec√≠ficos)
 * @property {Array<string>} campos_ativos - Campos utilizados em opera√ß√µes CRUD
 * 
 * @property {Object} dados_form_out - Template de dados enviado para formul√°rio (estrutura vazia)
 * @property {Object} dados_form_in - Dados preenchidos recebidos do formul√°rio
 */
export class api_fe {
    /**
     * üèóÔ∏è CONSTRUCTOR: Inicializa inst√¢ncia de API Frontend
     * 
     * ‚ö° PADR√ÉO RECOMENDADO: Constructor minimalista + configura√ß√£o por propriedades
     * 
     * @param {string} [app_name="framework_app"] - Nome da aplica√ß√£o
     * @param {string} [backend_url="http://localhost:5000"] - URL do servidor backend
     * 
     * @example
     * // ‚úÖ MODO RECOMENDADO: Inst√¢ncia local + configura√ß√£o por propriedades
     * const api = new api_fe();
     * api.aplicacao = "MeuApp";
     * api.backend_url = "http://localhost:8000";
     * api.database_name = "meuapp.db";
     * 
     * @example
     * // ‚úÖ MODO ALTERNATIVO: Constructor com par√¢metros b√°sicos
     * const api = new api_fe("FinCtl", "http://localhost:5000");
     */
    constructor(app_name = "framework_app", backend_url = "http://localhost:5000") {
        
        // =====================================
        // üéØ CONFIGURA√á√ïES DA APLICA√á√ÉO
        // =====================================
        
        /**
         * Nome da aplica√ß√£o que utiliza esta inst√¢ncia da API
         * @type {string}
         * @example "FinCtl", "Estoque", "CRM"
         */
        this.aplicacao = app_name;
        
        /**
         * Vers√£o da aplica√ß√£o (informativo)
         * @type {string}
         * @example "1.0.0", "2.1.3-beta"
         */
        this.versao = "";
        
        /**
         * Flag para ativar logs detalhados de debug
         * @type {boolean}
         */
        this.debug = false;
        
        // =====================================
        // üåê CONFIGURA√á√ïES DE COMUNICA√á√ÉO
        // =====================================
        
        /**
         * URL completa do servidor backend
         * @type {string}
         * @example "http://localhost:5000", "https://api.meusite.com"
         */
        this.backend_url = backend_url;
        
        /**
         * Timeout para requisi√ß√µes HTTP em milissegundos
         * @type {number}
         */
        this.timeout = 10000; // 10 segundos
        
        /**
         * Headers HTTP padr√£o para todas as requisi√ß√µes
         * @type {Object}
         */
        this.headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };
        
        // =====================================
        // üóÑÔ∏è CONFIGURA√á√ïES DO BANCO DE DADOS
        // =====================================
        
        /**
         * Nome do arquivo de banco de dados
         * @type {string}
         * @example "financas.db", "estoque.db"
         */
        this.database_name = "";
        
        /**
         * Caminho completo para o diret√≥rio do banco de dados
         * @type {string}
         * @example "c:\\apps\\backend\\database", "/home/user/db"
         */
        this.database_path = "";
        
        /**
         * Host do servidor de banco (para bancos remotos)
         * @type {string}
         * @example "localhost", "192.168.1.100"
         */
        this.database_host = "";
        
        // =====================================
        // üìã CONFIGURA√á√ïES DE DADOS
        // =====================================
        
        /**
         * Nome da view ativa para consultas de dados (OPERA√á√ïES DE LEITURA)
         * @type {string}
         * @example "vw_grupos", "vw_lancamentos_completos"
         * @usage Usado em: popularform(), buscar_todos(), consultas gerais
         */
        this.view = '';
        
        /**
         * Nome da tabela para opera√ß√µes CRUD (OPERA√á√ïES DE ESCRITA)
         * @type {string}
         * @example "tb_grupos", "tb_lancamentos"
         * @usage Usado em: inserir(), atualizar(), excluir() - N√ÉO usado em consultas
         */
        this.tabela_alvo = '';
        
        /**
         * Campos que ser√£o retornados das consultas (OPERA√á√ïES DE LEITURA)
         * 
         * CONVEN√á√ÉO OBRIGAT√ìRIA: Os nomes dos elementos HTML devem ser id√™nticos aos nomes das colunas da view.
         * Exemplo: Se a view tem coluna 'grupo', o HTML deve ter <input name="grupo"> ou <input id="grupo">
         * 
         * @type {Array<string>}
         * @example ["Todos"] para todos os campos ou ["grupo", "descricao"] para espec√≠ficos
         * @usage Usado em: popularform(), buscar_todos(), consultas gerais
         * @convention HTML elements name/id = view column name (required for auto-population)
         */
        this.campos = ["Todos"];
        
        /**
         * Array com nomes dos campos obrigat√≥rios para opera√ß√µes CRUD (OPERA√á√ïES DE ESCRITA)
         * @type {Array<string>}
         * @example ["grupo", "descricao"] para valida√ß√£o em inser√ß√£o/atualiza√ß√£o
         * @usage Usado em: inserir(), atualizar() - N√ÉO usado em consultas
         */
        this.campos_obrigatorios = [];
        
        // =====================================
        // üîÑ DADOS DE FORMUL√ÅRIOS
        // =====================================
        
        /**
         * Dados que entram no formul√°rio vindos do banco de dados (dicion√°rio para popular formul√°rio)
         * @type {Object}
         * @example {nome: "Jo√£o", email: "joao@email.com", telefone: "123456"}
         */
        this.dados_form_in = {};
        
        /**
         * Dados que saem do formul√°rio para o banco de dados (formato dicion√°rio de dados)
         * @type {Object}
         * @example {nome: "Maria", email: "maria@email.com", telefone: "654321"}
         */
        this.dados_form_out = {};
        
        console.log(`‚úÖ api_fe inicializada para aplica√ß√£o '${app_name}' apontando para ${backend_url}`);
    }
    
    // =====================================
    // üîß M√âTODOS DE CONFIGURA√á√ÉO
    // =====================================
    
    /**
     * Configura a view e tabela ativas para opera√ß√µes de dados
     * 
     * @param {string} nome_view - Nome da view para consultas (ex: "vw_grupos")
     * @param {string} nome_tabela - Nome da tabela para CRUD (ex: "tb_grupos") 
     * @param {Array<string>} [campos_obrigatorios=["Todos"]] - Array de campos obrigat√≥rios para opera√ß√£o
     * 
     * @example 
     * // Configura√ß√£o para grupos
     * api.configurar_dados("vw_grupos", "tb_grupos", ["grupo", "descricao"]);
     * 
     * // Configura√ß√£o para consulta complexa
     * api.configurar_dados("vw_lancamentos_completos", "tb_lancamentos", ["Todos"]);
     */
    configurar_dados(nome_view, nome_tabela, campos_obrigatorios = ["Todos"]) {
        this.view = nome_view;
        this.tabela_alvo = nome_tabela;
        this.campos_obrigatorios = campos_obrigatorios;
        console.log(`‚úÖ Dados configurados - View: ${nome_view}, Tabela: ${nome_tabela}, Campos obrigat√≥rios:`, campos_obrigatorios);
    }
    
    /**
     * Configura dados que v√£o para o formul√°rio (template/estrutura)
     * 
     * @param {Object} dados - Objeto com estrutura dos dados
     * 
     * @example
     * // Template para formul√°rio de grupos
     * api.configurar_dados_form_out({
     *     grupo: "",
     *     descricao: ""
     * });
     */
    configurar_dados_form_out(dados) {
        this.dados_form_out = dados;
        console.log('‚úÖ Template de formul√°rio configurado:', dados);
    }
    
    /**
     * Configura dados que v√™m do formul√°rio (valores preenchidos)
     * 
     * @param {Object} dados - Objeto com dados preenchidos pelo usu√°rio
     * 
     * @example
     * // Dados vindos do formul√°rio
     * api.configurar_dados_form_in({
     *     grupo: "Alimenta√ß√£o",
     *     descricao: "Despesas com comida e bebida"
     * });
     */
    configurar_dados_form_in(dados) {
        this.dados_form_in = dados;
        console.log('‚úÖ Dados de formul√°rio configurados:', dados);
    }
    
    /**
     * Atualiza configura√ß√£o do banco de dados
     * 
     * @param {Object} config - Nova configura√ß√£o do database
     * 
     * @example
     * // Configura√ß√£o de banco SQLite local
     * api.configurar_database({
     *     tipo: "sqlite",
     *     nome: "financas.db",
     *     caminho: "./dados/"
     * });
     */
    
    /**
     * Atualiza URL do backend
     * 
     * @param {string} nova_url - Nova URL do backend
     * 
     * @example
     * api.atualizar_backend_url("https://api.meusite.com");
     */
    atualizar_backend_url(nova_url) {
        this.backend_url = nova_url;
        console.log(`‚úÖ Backend URL atualizada para: ${nova_url}`);
    }
    
    // =====================================
    // üîß M√âTODOS AUXILIARES INTERNOS
    // =====================================
    
    /**
     * Realiza requisi√ß√£o HTTP para o backend
     * 
     * @param {string} operacao - Tipo de opera√ß√£o (select_all, insert, update, delete, etc.)
     * @param {Object} dados - Dados a serem enviados no payload
     * @returns {Promise<Object>} Resposta do backend
     * 
     * @private
     * @example
     * // Uso interno - n√£o chamar diretamente
     * const response = await this.fazer_requisicao("select_all", {
     *     tabela_or_view: "vw_grupos",
     *     database_config: this.database_config
     * });
     */
    async fazer_requisicao(operacao, dados) {
        try {
            const payload = {
                operacao: operacao,
                app_name: this.app_name,
                ...dados
            };
            
            console.log(`üåê Enviando requisi√ß√£o - Opera√ß√£o: ${operacao}`, payload);
            
            const config = {
                method: 'POST',
                headers: this.headers,
                body: JSON.stringify(payload)
            };
            
            const response = await fetch(this.backend_url, config);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const resultado = await response.json();
            console.log(`üåê Resposta recebida:`, resultado);
            
            return resultado;
            
        } catch (error) {
            console.error(`‚ùå Erro na requisi√ß√£o HTTP:`, error);
            throw error;
        }
    }
    
    /**
     * Valida se a configura√ß√£o b√°sica est√° completa
     * 
     * @param {string} tipo_operacao - Tipo de opera√ß√£o para validar
     * @returns {boolean} True se v√°lida, false caso contr√°rio
     * 
     * @private
     * @example
     * // Uso interno
     * if (!this.validar_configuracao("consulta")) {
     *     throw new Error("Configura√ß√£o incompleta");
     * }
     */
    validar_configuracao(tipo_operacao) {
        if (tipo_operacao === "consulta" && !this.view) {
            console.error("‚ùå View n√£o configurada para consulta");
            return false;
        }
        
        if (["insert", "update", "delete"].includes(tipo_operacao) && !this.tabela_alvo) {
            console.error("‚ùå Tabela alvo n√£o configurada para opera√ß√£o CRUD");
            return false;
        }
        
        // ‚úÖ CORRE√á√ÉO: Valida propriedades individuais ao inv√©s de database_config
        if (!this.database_name && !this.database_path) {
            console.error("‚ùå Configura√ß√£o de database n√£o definida (database_name ou database_path necess√°rio)");
            return false;
        }
        
        return true;
    }
    
    // =====================================
    // üóÑÔ∏è M√âTODOS CRUD - DATABASE
    // =====================================
    
    /**
     * Busca todos os registros da view/tabela configurada
     * 
     * @returns {Promise<Array>} Array com todos os registros encontrados
     * 
     * @example
     * // Buscar todos os grupos
     * const grupos = await api.buscar_todos();
     * console.log("Grupos encontrados:", grupos);
     * 
     * @example
     * // Com tratamento de erro
     * try {
     *     const registros = await api.buscar_todos();
     *     console.log(`Encontrados ${registros.length} registros`);
     * } catch (error) {
     *     console.error("Erro ao buscar dados:", error);
     * }
     */
    async buscar_todos() {
        try {
            if (!this.validar_configuracao("consulta")) {
                throw new Error("Configura√ß√£o inv√°lida para consulta");
            }
            
            // ‚úÖ CORRE√á√ÉO: Usa endpoint espec√≠fico /consultar_dados_db
            const url_consulta = `${this.backend_url}/consultar_dados_db`;
            const payload = {
                view: this.view,
                campos: this.campos || ["Todos"],
                database_path: this.database_path || "",
                database_name: this.database_name || "",
                database_host: this.database_host || ""
            };
            
            console.log(`üîç Buscando todos os registros de: ${this.view}`);
            console.log(`üåê URL: ${url_consulta}`, payload);
            
            const config = {
                method: 'POST',
                headers: this.headers,
                body: JSON.stringify(payload)
            };
            
            const response = await fetch(url_consulta, config);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const resultado = await response.json();
            console.log(`üåê Resposta recebida:`, resultado);
            
            // ‚úÖ NOVA ESTRUTURA: {dados: [...], mensagem: "sucesso"}
            if (resultado.mensagem === "sucesso") {
                console.log(`‚úÖ ${resultado.dados.length} registros encontrados`);
                return resultado.dados;
            } else {
                throw new Error(resultado.mensagem || "Erro na consulta");
            }
        } catch (error) {
            console.error("‚ùå Erro ao buscar todos os registros:", error);
            throw error;
        }
    }
    
    /**
     * Busca registro por ID espec√≠fico
     * 
     * @param {number|string} id - ID do registro a buscar
     * @returns {Promise<Object>} Registro encontrado
     * 
     * @example
     * // Buscar grupo por ID
     * const grupo = await api.buscar_por_id(5);
     * console.log("Grupo encontrado:", grupo);
     * 
     * @example
     * // Com valida√ß√£o
     * if (id) {
     *     const registro = await api.buscar_por_id(id);
     *     if (registro) {
     *         console.log("Dados:", registro);
     *     }
     * }
     */
    async buscar_por_id(id) {
        try {
            if (!this.validar_configuracao("consulta")) {
                throw new Error("Configura√ß√£o inv√°lida para consulta");
            }
            
            const operacao = "select_by_id";
            const dados = {
                tabela: this.view,
                id: id,
                database_path: this.database_path || "",
                database_name: this.database_name || "",
                database_host: this.database_host || ""
            };
            
            console.log(`üîç Buscando registro ID: ${id} em ${this.view}`);
            const response = await this.fazer_requisicao(operacao, dados);
            
            if (response.sucesso) {
                console.log("‚úÖ Registro encontrado:", response.registro);
                return response.registro;
            } else {
                throw new Error(response.erro || "Registro n√£o encontrado");
            }
        } catch (error) {
            console.error(`‚ùå Erro ao buscar registro ID ${id}:`, error);
            throw error;
        }
    }
    
    /**
     * Insere novo registro na tabela configurada
     * 
     * @param {Object} dados_registro - Dados do novo registro
     * @returns {Promise<Object>} Resultado da inser√ß√£o
     * 
     * @example
     * // Inserir novo grupo
     * const resultado = await api.inserir({
     *     grupo: "Transporte",
     *     descricao: "Despesas com combust√≠vel e manuten√ß√£o"
     * });
     * 
     * @example
     * // Com valida√ß√£o de resultado
     * try {
     *     const resultado = await api.inserir(novoDado);
     *     if (resultado.sucesso) {
     *         console.log(`Registro inserido com ID: ${resultado.id_inserido}`);
     *     }
     * } catch (error) {
     *     alert("Erro ao salvar: " + error.message);
     * }
     */
    async inserir(dados_registro) {
        try {
            if (!this.validar_configuracao("insert")) {
                throw new Error("Configura√ß√£o inv√°lida para inser√ß√£o");
            }
            
            const operacao = "insert";
            const dados = {
                tabela: this.tabela_alvo,
                dados: dados_registro,
                database_path: this.database_path || "",
                database_name: this.database_name || "",
                database_host: this.database_host || ""
            };
            
            console.log(`üìù Inserindo novo registro em ${this.tabela_alvo}:`, dados_registro);
            const response = await this.fazer_requisicao(operacao, dados);
            
            if (response.sucesso) {
                console.log(`‚úÖ Registro inserido com sucesso. ID: ${response.id_inserido}`);
                return response;
            } else {
                throw new Error(response.erro || "Erro na inser√ß√£o");
            }
        } catch (error) {
            console.error("‚ùå Erro ao inserir registro:", error);
            throw error;
        }
    }
    
    /**
     * Atualiza registro existente na tabela
     * 
     * @param {number|string} id - ID do registro a atualizar
     * @param {Object} dados_atualizacao - Dados para atualiza√ß√£o
     * @returns {Promise<Object>} Resultado da atualiza√ß√£o
     * 
     * @example
     * // Atualizar descri√ß√£o de um grupo
     * await api.atualizar(3, {
     *     descricao: "Nova descri√ß√£o para o grupo"
     * });
     * 
     * @example
     * // Atualiza√ß√£o completa
     * const dadosNovos = {
     *     grupo: "Lazer Atualizado",
     *     descricao: "Entretenimento e divers√£o"
     * };
     * await api.atualizar(grupoId, dadosNovos);
     */
    async atualizar(id, dados_atualizacao) {
        try {
            if (!this.validar_configuracao("update")) {
                throw new Error("Configura√ß√£o inv√°lida para atualiza√ß√£o");
            }
            
            const operacao = "update";
            const dados = {
                tabela: this.tabela_alvo,
                id: id,
                dados: dados_atualizacao,
                database_path: this.database_path || "",
                database_name: this.database_name || "",
                database_host: this.database_host || ""
            };
            
            console.log(`üìù Atualizando registro ID ${id} em ${this.tabela_alvo}:`, dados_atualizacao);
            const response = await this.fazer_requisicao(operacao, dados);
            
            if (response.sucesso) {
                console.log("‚úÖ Registro atualizado com sucesso");
                return response;
            } else {
                throw new Error(response.erro || "Erro na atualiza√ß√£o");
            }
        } catch (error) {
            console.error(`‚ùå Erro ao atualizar registro ID ${id}:`, error);
            throw error;
        }
    }
    
    /**
     * Remove registro da tabela
     * 
     * @param {number|string} id - ID do registro a remover
     * @returns {Promise<Object>} Resultado da remo√ß√£o
     * 
     * @example
     * // Remover grupo
     * if (confirm("Deseja realmente excluir este grupo?")) {
     *     await api.remover(grupoId);
     *     console.log("Grupo removido com sucesso");
     * }
     * 
     * @example
     * // Com tratamento de erro
     * try {
     *     await api.remover(id);
     *     alert("Registro exclu√≠do com sucesso!");
     * } catch (error) {
     *     alert("Erro ao excluir: " + error.message);
     * }
     */
    async remover(id) {
        try {
            if (!this.validar_configuracao("delete")) {
                throw new Error("Configura√ß√£o inv√°lida para remo√ß√£o");
            }
            
            const operacao = "delete";
            const dados = {
                tabela: this.tabela_alvo,
                id: id,
                database_path: this.database_path || "",
                database_name: this.database_name || "",
                database_host: this.database_host || ""
            };
            
            console.log(`üóëÔ∏è Removendo registro ID ${id} de ${this.tabela_alvo}`);
            const response = await this.fazer_requisicao(operacao, dados);
            
            if (response.sucesso) {
                console.log("‚úÖ Registro removido com sucesso");
                return response;
            } else {
                throw new Error(response.erro || "Erro na remo√ß√£o");
            }
        } catch (error) {
            console.error(`‚ùå Erro ao remover registro ID ${id}:`, error);
            throw error;
        }
    }
    
    // =====================================
    // üìã M√âTODOS DE FORMUL√ÅRIOS
    // =====================================
    
    /**
     * M√©todo gen√©rico para buscar dados do backend para popula√ß√£o de formul√°rios
     * 
     * @param {string|Object} formulario_ou_tipo - Nome do formul√°rio ou objeto de configura√ß√£o
     * @param {Object} [configuracao={}] - Configura√ß√µes espec√≠ficas do formul√°rio
     * @param {Object} [opcoes={}] - Op√ß√µes adicionais de personaliza√ß√£o
     * @returns {Promise<Object>} Dados recebidos do backend ou dicion√°rio vazio
     * 
     * @example
     * // Busca b√°sica por nome
     * const dados = await api.popularform("grupos");
     * 
     * @example
     * // Busca com configura√ß√£o espec√≠fica
     * const dados = await api.popularform("lancamentos", {
     *     filtro: "mes_atual",
     *     ordenacao: "data_desc"
     * });
     */
    async popularform(formulario_ou_tipo, configuracao = {}, opcoes = {}) {
        try {
            console.log('üìã popularform() iniciado:', {
                formulario: formulario_ou_tipo,
                configuracao,
                opcoes
            });
            
            // Valida√ß√£o b√°sica
            if (!this.view) {
                throw new Error("View n√£o configurada. Configure this.view primeiro.");
            }
            
            // Faz requisi√ß√£o ao backend usando buscar_todos
            // TODO: Implementar ordena√ß√£o quando estiver dispon√≠vel no backend
            const registros = await this.buscar_todos();
            
            // Retorna dados recebidos ou dicion√°rio vazio se n√£o houver dados
            const resultado = {
                sucesso: true,
                dados: registros || [],
                total: registros ? registros.length : 0,
                formulario: formulario_ou_tipo
            };
            
            console.log(`‚úÖ popularform() conclu√≠do: ${resultado.total} registros recebidos`);
            return resultado;
            
        } catch (error) {
            console.error('‚ùå Erro no popularform():', error);
            
            // Retorna dicion√°rio vazio em caso de erro
            return {
                sucesso: false,
                dados: [],
                total: 0,
                erro: error.message,
                formulario: formulario_ou_tipo
            };
        }
    }
    
    // =====================================
    // üîß M√âTODOS UTILIT√ÅRIOS
    // =====================================
    
    /**
     * Testa conectividade com o backend
     * 
     * @returns {Promise<Object>} Status da conex√£o
     * 
     * @example
     * // Teste simples
     * const status = await api.testar_conexao();
     * if (status.sucesso) {
     *     console.log("Backend dispon√≠vel");
     * }
     * 
     * @example
     * // Com tratamento completo
     * try {
     *     const resultado = await api.testar_conexao();
     *     console.log("Status do backend:", resultado);
     * } catch (error) {
     *     console.error("Backend inacess√≠vel:", error);
     * }
     */
    async testar_conexao() {
        try {
            const response = await fetch(`${this.backend_url}/health`, {
                method: 'GET',
                headers: this.headers
            });
            
            if (response.ok) {
                const dados = await response.json();
                console.log('‚úÖ Conex√£o com backend OK:', dados);
                return { 
                    sucesso: true, 
                    dados: dados,
                    url: this.backend_url 
                };
            } else {
                throw new Error(`Backend retornou status ${response.status}`);
            }
        } catch (error) {
            console.error('‚ùå Erro ao testar conex√£o:', error);
            return { 
                sucesso: false, 
                erro: error.message,
                url: this.backend_url
            };
        }
    }
    
    /**
     * Limpa todos os dados configurados na inst√¢ncia
     * 
     * @example
     * // Limpar dados de formul√°rio
     * api.limpar_dados();
     * console.log("Dados limpos");
     */
    limpar_dados() {
        this.dados_form_in = {};
        this.dados_form_out = {};
        this.campos_ativos = [];
        console.log('üßπ Dados da inst√¢ncia API limpos');
    }
    
    /**
     * Obt√©m configura√ß√£o atual completa da inst√¢ncia
     * 
     * @returns {Object} Configura√ß√£o atual
     * 
     * @example
     * // Verificar configura√ß√£o
     * const config = api.obter_configuracao();
     * console.log("Configura√ß√£o atual:", config);
     * 
     * @example
     * // Salvar configura√ß√£o para debug
     * const backup = api.obter_configuracao();
     * localStorage.setItem('api_backup', JSON.stringify(backup));
     */
    obter_configuracao() {
        return {
            // Identifica√ß√£o
            app_name: this.app_name,
            
            // Comunica√ß√£o
            backend_url: this.backend_url,
            timeout: this.timeout,
            
            // Database
            database_config: this.database_config,
            database_name: this.database_name,
            database_path: this.database_path,
            database_host: this.database_host,
            
            // Dados
            view: this.view,
            tabela_alvo: this.tabela_alvo,
            campos: this.campos,
            campos_ativos: this.campos_ativos,
            
            // Formul√°rios
            dados_form_in: this.dados_form_in,
            dados_form_out: this.dados_form_out
        };
    }
    
    /**
     * Exibe resumo das configura√ß√µes no console para debug
     * 
     * @example
     * // Debug r√°pido
     * api.debug_configuracao();
     */
    debug_configuracao() {
        const config = this.obter_configuracao();
        console.group(`üêõ Debug da API - ${this.app_name}`);
        console.log('üåê Backend URL:', config.backend_url);
        console.log('üóÑÔ∏è Database:', config.database_config);
        console.log('ÔøΩ View atual:', config.view);
        console.log('üéØ Tabela alvo:', config.tabela_alvo);
        console.log('üìù Campos ativos:', config.campos_ativos);
        console.log('üì• Dados form in:', config.dados_form_in);
        console.log('üì§ Dados form out:', config.dados_form_out);
        console.groupEnd();
    }
}

// =====================================
// üåç FUN√á√ïES UTILIT√ÅRIAS GLOBAIS
// =====================================

/**
 * Fun√ß√£o helper para criar API pr√©-configurada para uma aplica√ß√£o
 * 
 * @param {string} app_name - Nome da aplica√ß√£o
 * @param {Object} database_config - Configura√ß√£o do database
 * @param {string} [backend_url="http://localhost:5000"] - URL do backend
 * @returns {api_fe} Inst√¢ncia configurada da API
 * 
 * @example
 * // Cria√ß√£o simples
 * const api = criar_api_aplicacao("FinCtl", {
 *     tipo: "sqlite",
 *     nome: "financas.db"
 * });
 * 
 * @example
 * // Com backend customizado
 * const api = criar_api_aplicacao("MeuApp", config_db, "https://api.meuapp.com");
 */
export function criar_api_aplicacao(app_name, database_config, backend_url = "http://localhost:5000") {
    const api = new api_fe(app_name, backend_url, database_config);
    console.log(`‚úÖ API criada para aplica√ß√£o ${app_name}`);
    return api;
}

/**
 * Fun√ß√£o para testar m√∫ltiplas APIs simultaneamente
 * 
 * @param {Array<api_fe>} apis - Array de inst√¢ncias api_fe
 * @returns {Promise<Array>} Resultado dos testes
 * 
 * @example
 * // Testar v√°rias APIs
 * const resultados = await testar_multiplas_apis([api1, api2, api3]);
 * console.log("Status das APIs:", resultados);
 */
export async function testar_multiplas_apis(apis) {
    const resultados = [];
    
    for (const api of apis) {
        try {
            const resultado = await api.testar_conexao();
            resultados.push({
                app: api.app_name,
                url: api.backend_url,
                status: resultado.sucesso ? '‚úÖ OK' : '‚ùå ERRO',
                detalhes: resultado
            });
        } catch (error) {
            resultados.push({
                app: api.app_name,
                url: api.backend_url,
                status: '‚ùå ERRO',
                detalhes: { erro: error.message }
            });
        }
    }
    
    console.log('üìä Teste de m√∫ltiplas APIs:', resultados);
    return resultados;
}

// Log de inicializa√ß√£o do m√≥dulo
console.log('üöÄ M√≥dulo frontend_api.js carregado - Classe api_fe dispon√≠vel');
console.log('üìñ Framework DSB - Sistema de API Frontend v2.0');

