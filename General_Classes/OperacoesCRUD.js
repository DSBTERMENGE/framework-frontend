/*
************************************************************
        OPERA√á√ïES CRUD - FRAMEWORK DSB
************************************************************

Este arquivo implementa as opera√ß√µes de CRUD, navega√ß√£o e filtros
para formul√°rios ap√≥s valida√ß√£o de dados (Framework DSB).

ESPECIALIZA√á√ÉO: Manipula√ß√£o de interface e popula√ß√£o de formul√°rios
- Recebe dados da API e popula formul√°rios
- Executa opera√ß√µes de navega√ß√£o e filtros
- Gerencia interface durante opera√ß√µes

FLUXO DE EXECU√á√ÉO:
1. ValidarDadosForms.js ‚Üí Valida√ß√£o obrigat√≥ria
2. OperacoesCRUD.js ‚Üí Execu√ß√£o das opera√ß√µes (este arquivo)

RESPONSABILIDADES:
- Popular formul√°rios com dados recebidos da API
- Executar opera√ß√µes de navega√ß√£o (pr√≥ximo, anterior, primeiro, √∫ltimo)
- Executar filtros de busca
- Executar inser√ß√£o de novos registros
- Executar atualiza√ß√£o de registros existentes
- Gerenciar interface durante opera√ß√µes

INTEGRA√á√ÉO:
- Trabalha com dados da frontend_api.js
- Atualiza interface de formul√°rios
- Funciona para m√∫ltiplas aplica√ß√µes

√öLTIMA ATUALIZA√á√ÉO: Remanejado para frontend (Framework DSB)
************************************************************
*/

// ============= POPULA√á√ÉO DE FORMUL√ÅRIOS =============

/**
 * Popula formul√°rio com dados recebidos da API
 */
export async function popularFormulario() {
    try {
        console.log(`üìã Populando formul√°rio`);
        
        if (!window.api_finctl) {
            throw new Error("API global n√£o dispon√≠vel (window.api_finctl)");
        }
        
        const resultadoAPI = await window.api_finctl.consulta_dados_form();
        
        if (resultadoAPI.mensagem === "sucesso") {
            const dadosRecebidos = resultadoAPI.dados;
            if (dadosRecebidos && dadosRecebidos.length > 0) {
                // ‚úÖ INICIALIZA NAVEGA√á√ÉO DIRETAMENTE (otimiza√ß√£o sugerida pelo usu√°rio)
                dadosDisponiveis = dadosRecebidos || [];
                reg_num = 0; // SEMPRE INICIA EM 0 (primeiro registro = √≠ndice 0)
                console.log(`üìä Navega√ß√£o inicializada: ${dadosDisponiveis.length} registros dispon√≠veis`);
                console.log(`üìç Posi√ß√£o atual: reg_num=${reg_num} (registro ${reg_num + 1} de ${dadosDisponiveis.length})`);
                
                // ‚úÖ POPULA FORMUL√ÅRIO COM PRIMEIRO REGISTRO (reg_num = 0)
                _popularFormularioAutomatico(dadosRecebidos[0]);
                _popularSelectNavegacao(dadosRecebidos);
            }
            
            console.log(`‚úÖ Formul√°rio populado com ${dadosRecebidos.length} registros`);
            
            return { 
                sucesso: true, 
                registros: dadosRecebidos.length,
                dados: dadosRecebidos
            };
        } else {
            console.log(`‚ö†Ô∏è Erro na consulta: ${resultadoAPI.mensagem}`);
            return { 
                sucesso: false, 
                mensagem: resultadoAPI.mensagem,
                registros: 0
            };
        }
        
    } catch (error) {
        console.error(`‚ùå Erro ao popular formul√°rio:`, error);
        return { sucesso: false, erro: error.message };
    }
}

// ============= OPERA√á√ïES DE FILTRO =============

/**
 * Executa filtro de busca
 * @param {string} formulario - Nome do formul√°rio
 * @param {Object} criterios - Crit√©rios de filtro
 */
export async function executarFiltro(formulario, criterios) {
    console.log(`üîç Executando filtro - ${formulario}`, criterios);
    // TODO: Implementar filtro
}

/**
 * Limpa filtros ativos
 * @param {string} formulario - Nome do formul√°rio
 */
export async function limparFiltro(formulario) {
    console.log(`üßπ Limpando filtros - ${formulario}`);
    // TODO: Implementar limpeza de filtros
}

// ============= OPERA√á√ïES CRUD =============

/**
 * Insere novo registro
 * @param {string} formulario - Nome do formul√°rio
 * @param {Object} dados - Dados para inser√ß√£o
 */
export async function inserirRegistro(formulario, dados) {
    try {
        console.log(`üìù Inserindo novo registro - ${formulario}`, dados);
        // TODO: Implementar usando API global ou inst√¢ncia espec√≠fica
        return { sucesso: true, mensagem: "Registro inserido" };
        
    } catch (error) {
        console.error(`‚ùå Erro ao inserir registro - ${formulario}:`, error);
        throw error;
    }
}

/**
 * Atualiza registro existente
 * @param {string} formulario - Nome do formul√°rio
 * @param {number|string} id - ID do registro
 * @param {Object} dados - Dados para atualiza√ß√£o
 */
export async function salvarRegistro(formulario, id, dados) {
    try {
        console.log(`üíæ Salvando registro - ${formulario} ID: ${id}`, dados);
        // TODO: Implementar usando API global ou inst√¢ncia espec√≠fica
        return { sucesso: true, mensagem: "Registro salvo" };
        
    } catch (error) {
        console.error(`‚ùå Erro ao salvar registro - ${formulario}:`, error);
        throw error;
    }
}

/**
 * Remove registro
 * @param {string} formulario - Nome do formul√°rio
 * @param {number|string} id - ID do registro
 */
export async function removerRegistro(formulario, id) {
    try {
        console.log(`üóëÔ∏è Removendo registro - ${formulario} ID: ${id}`);
        
        // Confirmar remo√ß√£o
        if (!confirm(`Deseja realmente excluir este registro?`)) {
            console.log(`‚ùå Remo√ß√£o cancelada pelo usu√°rio - ${formulario}`);
            return { sucesso: false, cancelado: true };
        }
        
        // TODO: Implementar usando API global ou inst√¢ncia espec√≠fica
        return { sucesso: true, mensagem: "Registro removido" };
        
    } catch (error) {
        console.error(`‚ùå Erro ao remover registro - ${formulario}:`, error);
        throw error;
    }
}

// ============= UTILIT√ÅRIOS =============

/**
 * Popula formul√°rio automaticamente por conven√ß√£o de nomes
 * CONVEN√á√ÉO: Nome dos elementos HTML = Nome das colunas da view
 * 
 * @param {string} formulario - Nome do formul√°rio
 * @param {Object} dados - Dados do primeiro registro
 */
function _popularFormularioAutomatico(dados) {
    console.log(`üîÑ Populando formul√°rio automaticamente:`, dados);
    
    for (const [campo, valor] of Object.entries(dados)) {
        // ‚úÖ FILTRO: Ignora campos que n√£o devem ser exibidos (como 'id')
        if (campo === 'id') {
            console.log(`üîç Campo ${campo} = ${valor} (ignorado - campo interno)`);
            continue; // Pula para o pr√≥ximo campo
        }
        
        console.log(`üîç Procurando elemento para campo: ${campo} = ${valor}`);
        
        const elemento = document.querySelector(`[name="${campo}"]`) || 
                         document.querySelector(`#${campo}`) ||
                         document.querySelector(`input[id*="${campo}"], textarea[id*="${campo}"], select[id*="${campo}"]`);
        
        if (elemento) {
            elemento.value = valor || '';
            console.log(`‚úÖ Campo ${campo} populado: ${valor}`);
        } else {
            console.warn(`‚ö†Ô∏è Elemento n√£o encontrado para campo: ${campo}`);
        }
    }
}

/**
 * Popula select de navega√ß√£o com todos os registros
 * 
 * @param {string} formulario - Nome do formul√°rio
 * @param {Array} dados - Todos os registros recebidos
 */
function _popularSelectNavegacao(formulario, dados) {
    console.log(`üîÑ Populando select de navega√ß√£o - ${formulario}`);
    
    // Procura select de navega√ß√£o (conven√ß√£o: select com id contendo 'navegacao' ou 'nav')
    const selectNav = document.querySelector(`select[id*="navegacao"], select[id*="nav"], select[class*="navegacao"]`);
    
    if (selectNav && dados.length > 0) {
        // Limpa op√ß√µes existentes
        selectNav.innerHTML = '';
        
        // Adiciona op√ß√µes baseadas nos dados
        dados.forEach((registro, index) => {
            const option = document.createElement('option');
            option.value = index;
            
            // Usa primeiro campo como texto da op√ß√£o (ou campo espec√≠fico se conhecido)
            const campoTexto = registro.grupo || registro.nome || registro.descricao || Object.values(registro)[0];
            option.textContent = `${index + 1} - ${campoTexto}`;
            
            selectNav.appendChild(option);
        });
        
        console.log(`‚úÖ Select navega√ß√£o populado com ${dados.length} op√ß√µes`);
    }
}

/**
 * Atualiza interface ap√≥s opera√ß√£o
 */
export function atualizarInterface(operacao) {
    console.log(`üîÑ Atualizando interface ap√≥s ${operacao}`);
    // TODO: Implementar atualiza√ß√£o de interface
}

/**
 * Mostra loading durante opera√ß√£o
 * @param {boolean} mostrar - true para mostrar, false para ocultar
 */
export function mostrarLoading(mostrar) {
    // TODO: Implementar loading visual
    if (mostrar) {
        console.log('‚è≥ Mostrando loading...');
    } else {
        console.log('‚úÖ Ocultando loading...');
    }
}

// ============= SISTEMA DE NAVEGA√á√ÉO GEN√âRICO =============

// üìä VARI√ÅVEIS DE CONTROLE DE NAVEGA√á√ÉO
let dadosDisponiveis = [];  // Array com todos os registros carregados
let reg_num = 0;           // √çNDICE ATUAL (BASE 0) - corresponde ao √≠ndice do array
let contadorExecucoes = 0; // Contador para detectar execu√ß√µes m√∫ltiplas
let listenerConfigurado = false; // Flag para evitar listeners duplicados

/**
 * üîä BEEP DE AVISO: Emite som quando usu√°rio tenta ir al√©m dos limites
 * @param {string} limite - Tipo de limite atingido ('primeiro' ou 'ultimo')
 */
function emitirBeepLimite(limite) {
    // Beep do sistema usando AudioContext (mais compat√≠vel)
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = 800; // Frequ√™ncia do beep
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.2);
        
        console.log(`üîä BEEP: Limite ${limite} atingido!`);
    } catch (error) {
        // Fallback: alert ou console se AudioContext n√£o dispon√≠vel
        console.log(`üîä BEEP: Limite ${limite} atingido! (AudioContext n√£o dispon√≠vel)`);
    }
}

/**
 * üéØ CONFIGURA√á√ÉO DE LISTENERS: Sistema de navega√ß√£o gen√©rico para todos os formul√°rios
 * Intercepta eventos 'formulario-acao' e processa navega√ß√£o de forma unificada
 */
function configurarListenersNavegacao() {
    // ‚úÖ PROTE√á√ÉO: Evita listeners duplicados
    if (listenerConfigurado) {
        console.log('‚ö†Ô∏è DEBUG OperacoesCRUD: Listener j√° configurado - ignorando');
        return;
    }
    
    setTimeout(() => {
        const formFooter = document.querySelector('#divFormCrud footer');
        if (formFooter) {
            console.log('üîß DEBUG OperacoesCRUD: Configurando listeners de navega√ß√£o gen√©ricos');
            
            formFooter.addEventListener('formulario-acao', function(event) {
                const { acao, instancia, dados } = event.detail;
                
                console.log('üö®üö®üö® TESTE BREAKPOINT: OperacoesCRUD RECEBEU EVENTO! üö®üö®üö®');
                console.log('üìç Evento capturado no OperacoesCRUD.js:', acao);
                console.log('üìä Detalhes completos:', event.detail);
                
                // Processa apenas a√ß√µes de navega√ß√£o
                if (['primeiro', 'anterior', 'proximo', 'ultimo'].includes(acao)) {
                    console.log(`üéØ DEBUG OperacoesCRUD: Processando navega√ß√£o gen√©rica: ${acao}`);
                    console.log('üîÑ DIRECIONANDO PARA processarNavegacaoGenerica...');
                    processarNavegacaoGenerica(acao, instancia, dados);
                } else {
                    console.log(`‚ö†Ô∏è A√á√ÉO N√ÉO √â DE NAVEGA√á√ÉO: ${acao} (ignorando)`);
                }
            });
            
            listenerConfigurado = true; // Marca como configurado
            console.log('‚úÖ DEBUG OperacoesCRUD: Listeners de navega√ß√£o configurados');
        } else {
            console.error('‚ùå DEBUG OperacoesCRUD: Footer n√£o encontrado!');
        }
    }, 200);
}

/**
 * üîÑ PROCESSADOR PRINCIPAL: Switch case para a√ß√µes de navega√ß√£o
 * @param {string} acao - A√ß√£o de navega√ß√£o (primeiro, anterior, proximo, ultimo)
 * @param {Object} instancia - Inst√¢ncia do formul√°rio
 * @param {Object} dados - Dados do formul√°rio
 */
function processarNavegacaoGenerica(acao, instancia, dados) {
    console.log('üö®üö®üö® CHEGOU NO processarNavegacaoGenerica! üö®üö®üö®');
    console.log(`üîÑ Processando navega√ß√£o: ${acao}`);
    console.log('üìä Inst√¢ncia recebida:', instancia);
    console.log('üìä Dados recebidos:', dados);
    
    switch(acao) {
        case 'primeiro':
            console.log('üéØ DIRECIONANDO PARA: navegarParaPrimeiro');
            navegarParaPrimeiro(instancia);
            break;
        case 'anterior':
            console.log('üéØ DIRECIONANDO PARA: navegarParaAnterior');
            navegarParaAnterior(instancia);
            break;
        case 'proximo':
            console.log('üéØ DIRECIONANDO PARA: navegarParaProximo');
            navegarParaProximo(instancia);
            break;
        case 'ultimo':
            console.log('üéØ DIRECIONANDO PARA: navegarParaUltimo');
            navegarParaUltimo(instancia);
            break;
        default:
            console.warn(`‚ùì A√ß√£o de navega√ß√£o n√£o reconhecida: ${acao}`);
            break;
    }
}

// ============= FUN√á√ïES DE NAVEGA√á√ÉO (ESTRUTURA) =============

/**
 * üèÅ Navegar para o primeiro registro
 */
function navegarParaPrimeiro(instancia) {
    const timestampExecucao = Date.now();
    console.log(`üö®üö®üö® CHEGOU EM navegarParaPrimeiro! (${timestampExecucao}) üö®üö®üö®`);
    console.log('üèÅ Tentando navegar para primeiro registro');
    console.log('üìä Inst√¢ncia dispon√≠vel:', instancia);
    
    // ‚úÖ PROTE√á√ÉO: Detecta execu√ß√µes muito pr√≥ximas (poss√≠vel duplica√ß√£o)
    if (window.ultimaExecucaoPrimeiro && (timestampExecucao - window.ultimaExecucaoPrimeiro) < 100) {
        console.log(`üö´ EXECU√á√ÉO DUPLICADA DETECTADA! Ignorando (diferen√ßa: ${timestampExecucao - window.ultimaExecucaoPrimeiro}ms)`);
        return;
    }
    window.ultimaExecucaoPrimeiro = timestampExecucao;
    
    // ‚úÖ VALIDA√á√ÉO: Verifica se h√° dados dispon√≠veis
    if (!dadosDisponiveis || dadosDisponiveis.length === 0) {
        console.warn('‚ö†Ô∏è Nenhum dado dispon√≠vel para navega√ß√£o');
        return;
    }
    
    // ‚úÖ CONTROLE DE LIMITE: Verifica se j√° est√° no primeiro (BASE 0)
    if (reg_num === 0) {
        console.log('üîä J√° est√° no primeiro registro (reg_num=0) - emitindo beep');
        emitirBeepLimite('primeiro');
        return;
    }
    
    // ‚úÖ NAVEGA√á√ÉO: Move para primeiro registro (reg_num = 0)
    reg_num = 0;
    console.log(`üìç Navegou para primeiro: reg_num=${reg_num} (registro ${reg_num + 1} de ${dadosDisponiveis.length})`);
    
    // ‚úÖ ATUALIZA√á√ÉO: Popula formul√°rio com novo registro
    _popularFormularioAutomatico(dadosDisponiveis[reg_num]);
    console.log('‚úÖ Formul√°rio atualizado com primeiro registro');
}

/**
 * ‚¨ÖÔ∏è Navegar para o registro anterior
 */
function navegarParaAnterior(instancia) {
    contadorExecucoes++;
    const timestampExecucao = Date.now();
    console.log(`üö®üö®üö® CHEGOU EM navegarParaAnterior! EXECU√á√ÉO #${contadorExecucoes} (${timestampExecucao}) üö®üö®üö®`);
    console.log(`‚¨ÖÔ∏è ESTADO INICIAL: reg_num=${reg_num} (registro ${reg_num + 1} de ${dadosDisponiveis.length})`);
    console.log('üìä Inst√¢ncia dispon√≠vel:', instancia);
    
    // ‚úÖ PROTE√á√ÉO: Detecta execu√ß√µes muito pr√≥ximas (poss√≠vel duplica√ß√£o)
    if (window.ultimaExecucaoAnterior && (timestampExecucao - window.ultimaExecucaoAnterior) < 100) {
        console.log(`üö´ EXECU√á√ÉO DUPLICADA DETECTADA! Ignorando (diferen√ßa: ${timestampExecucao - window.ultimaExecucaoAnterior}ms)`);
        return;
    }
    window.ultimaExecucaoAnterior = timestampExecucao;
    
    // ‚úÖ VALIDA√á√ÉO: Verifica se h√° dados dispon√≠veis
    if (!dadosDisponiveis || dadosDisponiveis.length === 0) {
        console.warn('‚ö†Ô∏è Nenhum dado dispon√≠vel para navega√ß√£o');
        return;
    }
    
    console.log(`üîç VERIFICA√á√ÉO: reg_num=${reg_num}, condi√ß√£o (reg_num <= 0) = ${reg_num <= 0}`);
    
    // ‚úÖ CONTROLE DE LIMITE: Verifica se j√° est√° no primeiro (BASE 0: reg_num <= 0)
    if (reg_num <= 0) {
        console.log('üîä J√° est√° no primeiro registro (reg_num<=0) - n√£o pode ir para anterior - emitindo beep');
        emitirBeepLimite('primeiro');
        return;
    }
    
    // ‚úÖ NAVEGA√á√ÉO: Move um registro para tr√°s (reg_num = reg_num - 1)
    console.log(`üîÑ ANTES DO DECREMENTO: reg_num=${reg_num}`);
    reg_num--;
    console.log(`üîÑ AP√ìS DECREMENTO: reg_num=${reg_num}`);
    console.log(`üìç Navegou para anterior: reg_num=${reg_num} (registro ${reg_num + 1} de ${dadosDisponiveis.length})`);
    
    // ‚úÖ ATUALIZA√á√ÉO: Popula formul√°rio com novo registro
    console.log(`üìù Populando com dados[${reg_num}]:`, dadosDisponiveis[reg_num]);
    _popularFormularioAutomatico(dadosDisponiveis[reg_num]);
    console.log('‚úÖ Formul√°rio atualizado com registro anterior');
}

/**
 * ‚û°Ô∏è Navegar para o pr√≥ximo registro
 */
function navegarParaProximo(instancia) {
    contadorExecucoes++;
    const timestampExecucao = Date.now();
    console.log(`üö®üö®üö® CHEGOU EM navegarParaProximo! EXECU√á√ÉO #${contadorExecucoes} (${timestampExecucao}) üö®üö®üö®`);
    console.log(`‚û°Ô∏è ESTADO INICIAL: reg_num=${reg_num} (registro ${reg_num + 1} de ${dadosDisponiveis.length})`);
    console.log('üìä Inst√¢ncia dispon√≠vel:', instancia);
    
    // ‚úÖ PROTE√á√ÉO: Detecta execu√ß√µes muito pr√≥ximas (poss√≠vel duplica√ß√£o)
    if (window.ultimaExecucaoProximo && (timestampExecucao - window.ultimaExecucaoProximo) < 100) {
        console.log(`üö´ EXECU√á√ÉO DUPLICADA DETECTADA! Ignorando (diferen√ßa: ${timestampExecucao - window.ultimaExecucaoProximo}ms)`);
        return;
    }
    window.ultimaExecucaoProximo = timestampExecucao;
    
    // ‚úÖ VALIDA√á√ÉO: Verifica se h√° dados dispon√≠veis
    if (!dadosDisponiveis || dadosDisponiveis.length === 0) {
        console.warn('‚ö†Ô∏è Nenhum dado dispon√≠vel para navega√ß√£o');
        return;
    }
    
    const ultimoIndice = dadosDisponiveis.length - 1; // √öLTIMO √çNDICE (BASE 0)
    console.log(`üîç VERIFICA√á√ÉO: reg_num=${reg_num}, ultimoIndice=${ultimoIndice}`);
    
    // ‚úÖ CONTROLE DE LIMITE: Verifica se j√° est√° no √∫ltimo (BASE 0: reg_num >= length-1)
    if (reg_num >= ultimoIndice) {
        console.log(`üîä J√° est√° no √∫ltimo registro (reg_num=${reg_num}, √∫ltimo=${ultimoIndice}) - n√£o pode avan√ßar - emitindo beep`);
        emitirBeepLimite('ultimo');
        return;
    }
    
    // ‚úÖ NAVEGA√á√ÉO: Move um registro para frente (reg_num = reg_num + 1)
    console.log(`üîÑ ANTES DO INCREMENTO: reg_num=${reg_num}`);
    reg_num++;
    console.log(`üîÑ AP√ìS INCREMENTO: reg_num=${reg_num}`);
    console.log(`üìç Navegou para pr√≥ximo: reg_num=${reg_num} (registro ${reg_num + 1} de ${dadosDisponiveis.length})`);
    
    // ‚úÖ ATUALIZA√á√ÉO: Popula formul√°rio com novo registro
    console.log(`üìù Populando com dados[${reg_num}]:`, dadosDisponiveis[reg_num]);
    _popularFormularioAutomatico(dadosDisponiveis[reg_num]);
    console.log('‚úÖ Formul√°rio atualizado com pr√≥ximo registro');
}

/**
 * üèÅ Navegar para o √∫ltimo registro
 */
function navegarParaUltimo(instancia) {
    const timestampExecucao = Date.now();
    console.log(`üö®üö®üö® CHEGOU EM navegarParaUltimo! (${timestampExecucao}) üö®üö®üö®`);
    console.log('üèÅ Tentando navegar para √∫ltimo registro');
    console.log('üìä Inst√¢ncia dispon√≠vel:', instancia);
    
    // ‚úÖ PROTE√á√ÉO: Detecta execu√ß√µes muito pr√≥ximas (poss√≠vel duplica√ß√£o)
    if (window.ultimaExecucaoUltimo && (timestampExecucao - window.ultimaExecucaoUltimo) < 100) {
        console.log(`üö´ EXECU√á√ÉO DUPLICADA DETECTADA! Ignorando (diferen√ßa: ${timestampExecucao - window.ultimaExecucaoUltimo}ms)`);
        return;
    }
    window.ultimaExecucaoUltimo = timestampExecucao;
    
    // ‚úÖ VALIDA√á√ÉO: Verifica se h√° dados dispon√≠veis
    if (!dadosDisponiveis || dadosDisponiveis.length === 0) {
        console.warn('‚ö†Ô∏è Nenhum dado dispon√≠vel para navega√ß√£o');
        return;
    }
    
    const ultimoIndice = dadosDisponiveis.length - 1; // √öLTIMO √çNDICE (BASE 0)
    
    // ‚úÖ CONTROLE DE LIMITE: Verifica se j√° est√° no √∫ltimo (BASE 0)
    if (reg_num === ultimoIndice) {
        console.log(`üîä J√° est√° no √∫ltimo registro (reg_num=${reg_num}) - emitindo beep`);
        emitirBeepLimite('ultimo');
        return;
    }
    
    // ‚úÖ NAVEGA√á√ÉO: Move para √∫ltimo registro (reg_num = length-1)
    reg_num = ultimoIndice;
    console.log(`üìç Navegou para √∫ltimo: reg_num=${reg_num} (registro ${reg_num + 1} de ${dadosDisponiveis.length})`);
    
    // ‚úÖ ATUALIZA√á√ÉO: Popula formul√°rio com novo registro
    _popularFormularioAutomatico(dadosDisponiveis[reg_num]);
    console.log('‚úÖ Formul√°rio atualizado com √∫ltimo registro');
}

// ============= INICIALIZA√á√ÉO =============

// Configura listeners ao carregar o m√≥dulo
configurarListenersNavegacao();

// Log de inicializa√ß√£o
console.log('üìã M√≥dulo OperacoesCRUD.js (Framework DSB) carregado - Opera√ß√µes CRUD dispon√≠veis');
